 public class AuthRepo : IAuthRepo
    {
        private readonly IConfiguration _config;
        private readonly BalanceScorecardContext _context;
        public AuthRepo(BalanceScorecardContext context, IConfiguration config)
        {
            _context=context; 
            _config=config;
        }
       
        public async Task<User> CheckUser(string NetId)
        {
           return await _context.Users.FirstOrDefaultAsync(x=>x.NetId==NetId);

        }
        public string GetJWTToken(User user)
        {
            var role = _context.Roles.FirstOrDefault(x => x.Id == user.RoleId);
            var claims = new List<Claim>
            {
               new Claim(ClaimTypes.NameIdentifier, user.NetId),
               new Claim(ClaimTypes.Name, user.UserName),
               new Claim(ClaimTypes.SerialNumber, user.Id.ToString()),
               new Claim(ClaimTypes.Role,role.RoleName )

            };
            var key = new SymmetricSecurityKey(Encoding.UTF8
                 .GetBytes(_config.GetSection("AppSettings:Token").Value));

            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.Now.AddDays(7),
                // Expires = DateTime.Now.AddMinutes(12),
                SigningCredentials = creds
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);

        }
    }


 [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : CustomController
    {
        IAuthRepo _repo;
        public AuthController(IAuthRepo repo)
        {
            _repo = repo;
        }

        [AllowAnonymous]
        [HttpPost("login")]
        public async Task<IActionResult> Post(AuthUser user)
        {
            var authuser = await _repo.CheckUser(user.Netid);
            if (authuser == null)
                return BadRequest();

            return Ok(new
            {
                token = _repo.GetJWTToken(authuser)
            });


        }
     

       
    }

builder.Services.AddControllers(options =>
{
    var policy = new AuthorizationPolicyBuilder()
        .RequireAuthenticatedUser()
        .Build();
    options.Filters.Add(new AuthorizeFilter(policy));
});
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddDbContext<BalanceScorecardContext>();
builder.Services.AddScoped<IAuthRepo, AuthRepo>();
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8
                            .GetBytes(config.GetSection("AppSettings:Token").Value)),
                        ValidateIssuer = false,
                        ValidateAudience = false
                    };
                });
var app = builder.Build();